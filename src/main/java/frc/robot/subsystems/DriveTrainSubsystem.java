// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;


import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import frc.robot.RobotMap;
import frc.robot.Robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.Solenoid;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrainSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax rightFront;
    private CANSparkMax rightBack;
    private SpeedControllerGroup right;
    private CANSparkMax leftFront;
    private CANSparkMax leftBack;
    private SpeedControllerGroup left;
    private DifferentialDrive mRobotDrive;
    Solenoid gear;
    public int gearNum;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrainSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightFront = new CANSparkMax(RobotMap.RFSpark, MotorType.kBrushless);
        rightFront.setInverted(false);
                
        rightBack = new CANSparkMax(RobotMap.RBSpark, MotorType.kBrushless);
        rightBack.setInverted(false);
                
        right = new SpeedControllerGroup(rightFront, rightBack);
        addChild("Right", right);

                
        leftFront = new CANSparkMax(RobotMap.LFSpark, MotorType.kBrushless);
        leftFront.setInverted(false);
                
        leftBack = new CANSparkMax(RobotMap.LBSpark, MotorType.kBrushless);
        leftBack.setInverted(false);
                
        left = new SpeedControllerGroup(leftFront, leftBack);
        addChild("Left", left);

        mRobotDrive = new DifferentialDrive(left, right);
        addChild("Differential Drive", mRobotDrive);
        mRobotDrive.setSafetyEnabled(false);
        mRobotDrive.setMaxOutput(1.0);

        gear = new Solenoid(RobotMap.Drive);
        gearNum = 0;

                

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void arcadeDrive(double x, double y) {
        mRobotDrive.arcadeDrive(x,y);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveTrainCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        if (Robot.oi.getXbox1().getBumper(Hand.kRight))
            gear.set(true);
        else {
            gear.set(false);
        }

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

